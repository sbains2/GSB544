---
title: Lab 1
author: Sahil Bains
format:
  html:
    embed-resources: true
    code-fold: true
echo: true
---

## Task 1
a. 
This chart shows life expectancy measured by income, where the y-axis represents life expectancy (in years), and x-axis represents income (GDP per capita). The variables that are mapped so that the color represents a region, where each dot represents a specific country. The size of the bubbles represents the population.

b.
```{python}
import pandas as pd
import numpy as np
from plotnine import *


# Importing datasets as csv's
df1 = pd.read_csv('q1.csv')
df2 = pd.read_csv('q2.csv')
df3 = pd.read_csv('q3.csv')

df1.info()
```

c. Recreating the plot
```{python}
# Subsetting for 2010 and normalizing data
df2010 = df1[(df1['year'] == 2010) & df1['four_regions'].notna()]

# Specifying breaks for xticks and yticks
x_breaks = [500, 1000, 2000, 4000, 8000, 16000, 32000, 64000]
x_labels = ['500', '1000', '2000', '4000', '8000', '16k', '32k', '64k']
y_breaks = [20, 30, 40, 50, 60, 70, 80, 90]
y_labels = ['20', '30', '40', '50', '60', '70', '80', '90']

# Defining the colors for each region
regions_four = {
    'asia': 'deeppink',
    'americas': 'lawngreen',
    'europe': 'yellow',
    'africa': 'cyan'
}

(
    ggplot(df2010, aes(x='income', y='life_exp', size='population', fill='four_regions'))
    + scale_x_continuous(trans='log10', limits=(400, 70000), breaks=x_breaks, labels=x_labels)
    + scale_y_continuous(limits=(20, 90), breaks=y_breaks, labels=y_labels)
    + geom_point(show_legend=True, color='black', stroke=.2)
    + labs(
        x='Income', 
        y='Life Expectancy',
        color='Region',
        title='Income vs. Life Expectancy (2010)')
    + scale_size(range=(2,12), guide='legend')
    # Making the chart taller so vertical scale doesn't condense values
    + theme(figure_size=(9,6))
    + scale_fill_manual(values=regions_four)
    + annotate(geom='text', x=5000, y=55, label='2010', size=100, alpha=0.2, color='gray')

)

```
Here, I used log10 x-axis to spread out low-income countries and make the income-life expectancy pattern visible. I also scaled the bubble area to population so that big countries don't overlap over the small points.


d. Using other geometries

```{python}
# Subsetting for 2010 and normalizing data
df2010 = df1[(df1['year'] == 2010) & df1['four_regions'].notna()]

# Specifying breaks for xticks and yticks
x_breaks = [500, 1000, 2000, 4000, 8000, 16000, 32000, 64000]
x_labels = ['500', '1000', '2000', '4000', '8000', '16k', '32k', '64k']
y_breaks = [20, 30, 40, 50, 60, 70, 80, 90]
y_labels = ['20', '30', '40', '50', '60', '70', '80', '90']

# Defining the colors for each region
regions_four = {
    'asia': 'deeppink',
    'americas': 'lawngreen',
    'europe': 'yellow',
    'africa': 'cyan'
}


(
    ggplot(df2010, aes(x='income', y='life_exp', size='population', color='four_regions'))
    + scale_x_continuous(trans='log10', limits=(400, 70000), breaks=x_breaks, labels=x_labels)
    + scale_y_continuous(limits=(20, 90), breaks=y_breaks, labels=y_labels)
    + geom_smooth(show_legend=True)
    + labs(
        x='Income', 
        y='Life Expectancy',
        color='Region',
        title='Income vs. Life Expectancy (2010)')
    + scale_size(range=(2,12), guide='legend')
    # Making the chart taller so vertical scale doesn't condense values
    + theme(figure_size=(9,6))
    + scale_color_manual(values=regions_four)
    + annotate(geom='text', x=5000, y=55, label='2010', size=100, alpha=0.2, color='gray')

)
```

Here, we use the geom_smooth plotting function in order to plot the life expectancy with income. Geom_smooth() shows an average trend by region but hides the country-level variation and population differences, so it's not ideal. Overall, geom_point is best for understanding how each country sits with income and life expectancy. 


## Task 2

a. Aesthetics explanation
Here, the x-axis aesthetic is mapped to the exports as the percentage of each country's GDP, and the y-axis aesthetic is mapped to the imports as a percentage of each country's GDP. The size of each bubble corresponds to energy use, while the color represents the world region each country belongs to. Each bubble represents a single country in the year shown, which allows comparisons across both trade and energy consumption, with the regions being indicated by the color.

b. Importing q2 data
```{python}
df2 = pd.read_csv('q2.csv')
df2.info()
```

c. Recreating the plot using plotnine
```{python}
# Subsetting for 1997 and normalizing data
df1997 = df2[(df2['year'] == 1997) & df2['four_regions'].notna()]
df1997['energy'] = pd.to_numeric(df1997['energy'], errors='coerce') # Changing energy column to numeric, invalids turn into NaN
df1997 = df1997.dropna()

# Defining the colors for each region
regions_four = {
    'asia': 'deeppink',
    'americas': 'lawngreen',
    'europe': 'yellow',
    'africa': 'cyan'
}

# Specifying breaks for xticks and yticks
x_breaks = range(20, 221, 20)
x_labels = ['20', '40', '60', '80', '100', '120', '140', '160', '180', '200', '220']
y_breaks = range(50, 401, 50)
y_labels = ['50', '100', '150', '200', '250', '300', '350', '400']

(
    ggplot(df1997, aes(x='exports', y='imports', size='energy', fill='four_regions'))
    + scale_x_continuous(limits=(20, 230), breaks=x_breaks, labels=x_labels)
    + scale_y_continuous(limits=(50, 410), breaks=y_breaks, labels=y_labels)
    + geom_point(show_legend=True, color='black', stroke=.2)
    + labs(
        x="Exports (\% of GDP)", 
        y="Imports (\% of GDP)",
        color='Region',
        size='Energy',
        title='Income vs. Life Expectancy (2010)')
    + scale_size(range=(2,12), guide='legend')
    # Making the chart taller so vertical scale doesn't condense values
    + theme(figure_size=(9,6))
    + scale_fill_manual(values=regions_four)
    + annotate(geom='text', x=125, y=200, label='1997', size=100, alpha=0.2, color='gray')

)
```
In order to plot the income vs. life expectancy properly, I coerced the energy column into numeric. I then dropped rows missing any mapping aesthetic to ensure invalid values were not included.

d. Using other geometries

```{python}
# Subsetting for 1997 and normalizing data
df1997 = df2[(df2['year'] == 1997) & df2['four_regions'].notna()]
df1997['energy'] = pd.to_numeric(df1997['energy'], errors='coerce') # Changing energy column to numeric, invalids turn into NaN
df1997 = df1997.dropna()

# Defining the colors for each region
regions_four = {
    'asia': 'deeppink',
    'americas': 'lawngreen',
    'europe': 'yellow',
    'africa': 'cyan'
}

# Specifying breaks for xticks and yticks
x_breaks = range(20, 221, 20)
x_labels = ['20', '40', '60', '80', '100', '120', '140', '160', '180', '200', '220']
y_breaks = range(50, 401, 50)
y_labels = ['50', '100', '150', '200', '250', '300', '350', '400']

(
    ggplot(df1997, aes(x='exports', y='imports', size='energy', color='four_regions'))
    + scale_x_continuous(limits=(20, 230), breaks=x_breaks, labels=x_labels)
    + scale_y_continuous(limits=(40, 410), breaks=y_breaks, labels=y_labels)
    + geom_smooth(show_legend=True)
    + labs(
        x="Exports (\% of GDP)", 
        y="Imports (\% of GDP)",
        color='Region',
        size='Energy',
        title='Income vs. Life Expectancy (2010)')
    + scale_size(range=(2,12), guide='legend')
    # Making the chart taller so vertical scale doesn't condense values
    + theme(figure_size=(9,6))
    + annotate(geom='text', x=125, y=200, label='1997', size=100, alpha=0.2, color='gray')
    + scale_color_manual(values=regions_four)

)
```
Explanation: Similarly to task 1, geom_smooth() summarizes the trends by region but doesn't visualize country-level spread and the corresponding outliers. geom_point() is optimal in this case for representing all of the aesthetics that are used.

## Task 3

a. Here, the x-axis aesthetic is being mapped to individuals using the internet (%), and the y-axis aesthetic is being mapped to the GDP per capita. The size of each bubble represents income, while the color of the bubble corresponds to the world region that each country belongs to.

b. importing the data
```{python}
df3 = pd.read_csv('q3.csv')
df3.info()
```

c. Recreating the plot
```{python}
# Subsetting for 2001 and normalizing data
df2001 = df3[(df3['year'] == 2001)]
df2001 = df2001.dropna(subset=('internet_users', 'gdp', 'income', 'four_regions'))

# Specifying breaks for xticks and yticks
x_breaks = list(range(0, 101, 10))
x_labels = ['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100']
y_breaks = [200, 500, 1000, 2000, 5000, 10000, 20000, 50000, 100000]
y_labels = ['200', '500', '1000', '2000', '5000', '10k', '20k', '50k', '100k']

# Defining the colors for each region
regions_four = {
    'asia': 'deeppink',
    'americas': 'lawngreen',
    'europe': 'yellow',
    'africa': 'cyan'
}

(
    ggplot(df2001, aes(x='internet_users', y='gdp', size='income', fill='four_regions'))
    + scale_x_continuous(limits=(0, 100), breaks=x_breaks, labels=x_labels)
    + scale_y_continuous(trans='log10', limits=(200, 200000), breaks=y_breaks, labels=y_labels)
    + geom_point(show_legend=True, shape='o', color='black', stroke=.2)
    + labs(
        x="Individuals using the internet", 
        y="GDP/Capita",
        color='Region',
        size='income',
        title='Regional GDP measured by Individuals Using the Internet')
    + scale_size_area(max_size=10, guide='legend')
    # Making the chart taller so vertical scale doesn't condense values
    + theme(figure_size=(9,6))
    + annotate(geom='text', x=55, y=7000, label='2001', size=100, alpha=0.2, color='gray')
    + scale_fill_manual(values=regions_four)


)
```

d. Using other geometries
```{python}
# Subsetting for 2001 and normalizing data
df2001 = df3[(df3['year'] == 2001)]
df2001 = df2001.dropna(subset=('internet_users', 'gdp', 'income', 'four_regions'))

# Specifying breaks for xticks and yticks
x_breaks = list(range(0, 101, 10))
x_labels = ['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100']
y_breaks = [200, 500, 1000, 2000, 5000, 10000, 20000, 50000, 100000]
y_labels = ['200', '500', '1000', '2000', '5000', '10k', '20k', '50k', '100k']

# Defining the colors for each region
regions_four = {
    'asia': 'deeppink',
    'americas': 'lawngreen',
    'europe': 'yellow',
    'africa': 'cyan'
}

(
    ggplot(df2001, aes(x='internet_users', y='gdp', size='income', color='four_regions'))
    + scale_x_continuous(limits=(0, 100), breaks=x_breaks, labels=x_labels)
    + scale_y_continuous(trans='log10', limits=(200, 200000), breaks=y_breaks, labels=y_labels)
    + geom_smooth(show_legend=True)
    + labs(
        x="Individuals using the internet", 
        y="GDP/Capita",
        color='Region',
        size='income',
        title='Regional GDP measured by Individuals Using the Internet')
    + scale_size_area(max_size=10, guide='legend')
    # Making the chart taller so vertical scale doesn't condense values
    + theme(figure_size=(9,6))
    + annotate(geom='text', x=55, y=7000, label='2001', size=100, alpha=0.2, color='gray')
    + scale_color_manual(values=regions_four)


)
```
Explanation: Overall, geom_smooth captures the upward trend of internet use and GDP however it doesn't include the cross country variation as well as the regional differences in the bubbles. Here, it would be more effective to use geom_point for multi-variable comparison.